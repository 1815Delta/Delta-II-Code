#pragma config(UART_Usage, UART2, uartVEXLCD, baudRate19200, IOPins, None, None)
#pragma config(Sensor, in1,    liftPotentiometer, sensorPotentiometer)
#pragma config(Motor,  port1,           backRight,     tmotorVex393_HBridge, openLoop)
#pragma config(Motor,  port2,           frontRight,    tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port3,           backLeft,      tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port4,           frontLeft,     tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port5,           lift1,         tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port6,           lift2,         tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port7,           lift3,         tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port8,           lift4,         tmotorVex393_MC29, openLoop, reversed)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//
task main()
{
string LiftAngle; //Create a string "LiftAngle" for Lift Value Display//
while (1==1){
 /////////////////////////
//Lift Value Displaying//
/////////////////////////
bLCDBacklight = true;
displayLCDString(0, 0, "- Lift: "); //Displaying the Lift Angle
sprintf(LiftAngle, "%1.2f%c", (SensorValue[liftPotentiometer]-250)); //Build value to be displayed (Math done to view sensor in degrees)//
displayNextLCDString(LiftAngle); //Display the string "LiftAngle"//
 //////////////////////
//Drivetrain Control//
//////////////////////
motor[backRight]=-(vexRT[Ch3])+(vexRT[Ch1]); //backRight H-Drive direction motor//
motor[frontRight]=-(vexRT[Ch3]/1.4)+(vexRT[Ch1]/1.4); //frontRight X-Drive direciton motor//
motor[backLeft]=-(vexRT[Ch3])-(vexRT[Ch1]); //backLeft H-Drive direction motor//
motor[frontLeft]=-(vexRT[Ch3]/1.4)-(vexRT[Ch1]/1.4); //frontLeft X-Drive direction motor//

 ////////////////
 //Lift Control//
////////////////

//Dump position function//
if(vexRT[Btn6U]==1){
 if ((SensorValue[liftPotentiometer]-250)<=1800){
motor[lift1]=127;
motor[lift2]=127;
motor[lift3]=127;
motor[lift4]=127;
}
else if ((SensorValue[liftPotentiometer]-250)<=2000){
motor[lift1]=40;
motor[lift2]=40;
motor[lift3]=40;
motor[lift4]=40;
}
else{
motor[lift1]=0;
motor[lift2]=0;
motor[lift3]=0;
motor[lift4]=0;
}
}
//Intake position function//
else if(vexRT[Btn6D]==1){
if ((SensorValue[liftPotentiometer]-250)<=400){
motor[lift1]=127;
motor[lift2]=127;
motor[lift3]=127;
motor[lift4]=127;
}
else if ((SensorValue[liftPotentiometer]-250)<=500){
motor[lift1]=63;
motor[lift2]=63;
motor[lift3]=63;
motor[lift4]=63;
}
else if ((SensorValue[liftPotentiometer]-250)>=1000){
motor[lift1]=-127;
motor[lift2]=-127;
motor[lift3]=-127;
motor[lift4]=-127;
}
else if ((SensorValue[liftPotentiometer]-250)>=700){
motor[lift1]=-20;
motor[lift2]=-20;
motor[lift3]=-20;
motor[lift4]=-20;
}
else{
motor[lift1]=0;
motor[lift2]=0;
motor[lift3]=0;
motor[lift4]=0;
}
}
//Emergency Stop Lift Function//
else if(vexRT[Btn7R]==1){
motor[lift1]=0;
motor[lift2]=0;
motor[lift3]=0;
motor[lift4]=0;
}
//Automatic down-position function//
else{
if ((SensorValue[liftPotentiometer]-250)<=0){
motor[lift1]=20;
motor[lift2]=20;
motor[lift3]=20;
motor[lift4]=20;
}
else if ((SensorValue[liftPotentiometer]-250)>=300){
motor[lift1]=-127;
motor[lift2]=-127;
motor[lift3]=-127;
motor[lift4]=-127;
}
else if ((SensorValue[liftPotentiometer]-250)>=100){
motor[lift1]=-20;
motor[lift2]=-20;
motor[lift3]=-20;
motor[lift4]=-20;
}
else{
motor[lift1]=0;
motor[lift2]=0;
motor[lift3]=0;
motor[lift4]=0;
}
}
}
}