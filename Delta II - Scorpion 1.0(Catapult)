#pragma config(UART_Usage, UART1, uartVEXLCD, baudRate19200, IOPins, None, None)
#pragma config(Sensor, in1,    CataSense,      sensorPotentiometer)
#pragma config(Sensor, in2,    Power,          sensorAnalog)
#pragma config(Sensor, in3,    gyro,           sensorGyro)
#pragma config(Sensor, in8,    CataThing,      sensorPotentiometer)
#pragma config(Sensor, dgtl1,  ForwardEncoder, sensorQuadEncoder)
#pragma config(Sensor, dgtl3,  StrafeEncoder,  sensorQuadEncoder)
#pragma config(Sensor, dgtl5,  ,               sensorQuadEncoder)
#pragma config(Sensor, dgtl7,  CatapultDown,   sensorTouch)
#pragma config(Sensor, dgtl8,  Sonar,          sensorSONAR_inch)
#pragma config(Motor,  port1,           Catapult1,     tmotorVex393_HBridge, openLoop)
#pragma config(Motor,  port2,           DriveL,        tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port3,           DriveR,        tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port4,           Strafe1,       tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port5,           Strafe2,       tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port6,           Catapult2,     tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port7,           Catapult3,     tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port8,           Catapult4,     tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port9,           Catapult5,     tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port10,          Catapult6,     tmotorVex393_HBridge, openLoop)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

        ////////////////////////////////////////////////////////////////////////////////
       //    ____     _______  __    _______     ___          ____   ____            //
      //    / _  \    \  ____\ \ \   \__   _\   |   \        \_  _\  \_  _\         //
     //    / / \  \    \ \__    \ \      \ \    | |\ \         \ \     \ \         //
    //    / /   \  \    \  __\   \ \      \ \   |  _  \         \ \     \ \       //
   //    / /_____\  \    \ \____  \ \___   \ \  | | \  \        _\ \_   _\ \_    //
  //     \__________/     \______\ \_____\  \_\ |_|  \__\       \_____\ \_____\ //
 //                                                                            //
////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                          //
//                              Delta II Program                                           //
//                                                                                        //
///////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////
//Competition Control and Duration Settings //                                                 //
#pragma platform(VEX)                      //Pick the VEX platform                            //
#pragma competitionControl(Competition)   //                                                 //
#pragma autonomousDuration(15)           //Duration of autonomous (0 min 15 sec)            //
#pragma userControlDuration(105)        //Duration of usercontrol (1 min 45 sec)           //
#include "Vex_Competition_Includes.c"  //Main competition background code...do not modify!//
//End of Control Settings             //                                                 //
//////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                          //
//                          Pre-Autonomous Functions                                       //
//                                                                                        //
///////////////////////////////////////////////////////////////////////////////////////////

void pre_auton()//Before Auton//
{
bStopTasksBetweenModes = true; //Stop Tasks between modes such as auton and usercontrol//
while(true){ //While Loop for constantly resetting the gyroscope//
	SensorValue[gyro]=0; //Resets the gyroscope//
	bLCDBacklight = true; //Turn on the LCD Backlight//
	displayLCDCenteredString(0, "-=[Delta II]=-"); //Display Robot Name//
	displayLCDCenteredString(1, "[ALL CHOSEN SENSORS CLEARED]"); //Display Sensors cleared//
	wait1Msec(3000); //Wait 3 seconds//
	displayLCDCenteredString(1, "[Functions Disabled]"); //Display All Functions Disabled//
	wait1Msec(3000); //Wait 3 seconds//
}
}
//////////////////////////////////
//        End of task          //
////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                               //
//                                 Autonomous Task                                              //
//                                                                                             //
////////////////////////////////////////////////////////////////////////////////////////////////

task autonomous()//Program Control Enabled//
{
  // .....................................................................................
  // Insert user code here.
  // .....................................................................................

	AutonomousCodePlaceholderForTesting();  // Remove this function call once you have "real" code.
}
//////////////////////////////////
//        End of task          //
////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                //
//                                 User Control Task                                             //
//                                                                                              //
/////////////////////////////////////////////////////////////////////////////////////////////////

task usercontrol()//Control Operation Enabled//
{
string CatapultAngleThing, GyroscopeAngle, backupBattery, primBattery; //Create 4 strings (Strings are a build-up of numbers and letters into one)//

//* Reset Gyroscope ONCE while connected *//
int count = 0; //Create an integer (An integer is a word that can relivance a number)//
while(count < 1) //While the integer "count" is below 1//
{
SensorValue[gyro]=0; //Reset the gyroscope//
count = count + 1; //Add a value of 1 to integer "count"//
}

/////////////////////////////
//   Remote Control Loop  //
///////////////////////////

while (true) //Create an infinite-running loop//
	{

//////////////////////////////
// LCD Display Programming //
////////////////////////////

//* Catapult Displaying *//
bLCDBacklight = true; //Turn on the LCD Backlight//
displayLCDString(0, 0, "- Catapult: "); //Display the catapult angle//
sprintf(CatapultAngleThing, "%1.2f%c", (SensorValue[CataThing]-375)/15); //Build value to be displayed (Math done to view sensor in degrees)//
displayNextLCDString(CatapultAngleThing); //Display the string "CatapultAngleThing//

   ///////////////////////////////////////////////////////////////
  //Note: One Volt for the expander is a sensor reading of 280 //
 // And One Volt for the primary battery is a reading of 1000 //
///////////////////////////////////////////////////////////////

//* Expander Battery Displaying *//
if(SensorValue[Power]<2240){ //If Expander Battery is below 8V (2240 Value)//
	clearLCDLine(1); //Clear LCD line 1 (Bottom Line)//
	displayLCDString(1, 0, "Exp. Low: "); //Display Expander Low//
sprintf(backupBattery, "%1.2f%c", SensorValue[Power]/280.0, 'V');    //Build the value to be displayed//
displayNextLCDString(backupBattery); //Display the string "backupBattery"//
}

//* Primary Battery Displaying *//
else if(nImmediateBatteryLevel<8000){ //If Primary Battery is below 8V (7000 Value)//
	clearLCDLine(1); //Clear LCD Line 1 (Bottom Line)//
	displayLCDString(1, 0, "Prim. Low: "); //Display Primary Low//
sprintf(primBattery, "%1.2f%c", nImmediateBatteryLevel/1000.0, 'V'); //Build value to be displayed//
displayNextLCDString(primBattery); //Display the string "primBattery"//
}

//* Gyroscope Displaying *//
else{
displayLCDString(1, 0, "- Gyroscope: "); //Displaying the Gyroscope Angle
sprintf(GyroscopeAngle, "%1.2f%c", SensorValue[gyro]/10); //Build value to be displayed (Math done to view sensor in degrees)//
displayNextLCDString(GyroscopeAngle); //Display the string "GyroscopeAngle"//
}

  ////////////////////////////////////////
 ///       Drivetrain Control         ///
////////////////////////////////////////

   /////////////////////////////////////////////////////////////
  // Note: This may not make sense, so visuals will be drawn //
 //  The gyroscope's value is measued in a 10th of a degree //
/////////////////////////////////////////////////////////////

//* Manual "Right Side" Control (Backup Control) *//
if(SensorValue[Btn5U]==1){ //Emergency "Right Side" Drive//
motor[DriveL]=-vexRT[Ch4]-(vexRT[Ch1]/2); //Left 2 motors driving//
motor[DriveR]=-vexRT[Ch4]+(vexRT[Ch1]/2); //Right 2 motors driving//
motor[Strafe1]=+vexRT[Ch3]; //Left Strafe motor driving//
motor[Strafe2]=+vexRT[Ch3]; //Right Strafe motor driving//
}

//* Manual "Left Side" Control (Backup Control) *//
else if(SensorValue[Btn5D]==1){ //Emergency "Left Side" Drive//
motor[DriveL]=+vexRT[Ch4]-(vexRT[Ch1]/2); //Left 2 motors driving//
motor[DriveR]=+vexRT[Ch4]+(vexRT[Ch1]/2); //Right 2 motors driving//
motor[Strafe1]=-vexRT[Ch3]; //Left Strafe motor driving//
motor[Strafe2]=-vexRT[Ch3]; //Right Strafe motor driving//
}

//* Smart Drive *//
else{ //Else if no backup is enabled//
if (SensorValue[CataSense]>2000){ //If The robot is told that it's on the right side of the field//
	if (SensorValue[gyro]<450&SensorValue[gyro]>-450){ //Less than 45 degrees and more than -45 degrees//
motor[DriveL]=-vexRT[Ch4]-(vexRT[Ch1]/2); //Left 2 motors driving//
motor[DriveR]=-vexRT[Ch4]+(vexRT[Ch1]/2); //Right 2 motors driving//
motor[Strafe1]=+vexRT[Ch3]; //Left Strafe motor driving//
motor[Strafe2]=+vexRT[Ch3]; //Right Strafe motor driving//

  ////////////////////
 //Intake Direction//
////////////////////
//               //
//         _     //
//    ____|  \   //
//   |____    )  //
//        |_ /   //
//               //
//               //
//               //
///////////////////

}
else if (SensorValue[gyro]>450&SensorValue[gyro]<1350){ //More than 45 degrees but less than 135 degrees//
motor[DriveL]=-vexRT[Ch3]-(vexRT[Ch1]/2); //Left 2 motors driving//
motor[DriveR]=-vexRT[Ch3]+(vexRT[Ch1]/2); //Right 2 motors driving//
motor[Strafe1]=-vexRT[Ch4]; //Left Strafe motor driving//
motor[Strafe2]=-vexRT[Ch4]; //Right Strafe motor driving//

  ////////////////////
 //Intake Direction//
////////////////////
//       _       //
//      / \      //
//     /   \     //
//    /_   _\    //
//      | |      //
//      | |      //
//      |_|      //
//               //
///////////////////

}
else if (SensorValue[gyro]>1350&SensorValue[gyro]<2250){ //More than 135 degrees but less than 225 degrees//
motor[DriveL]=+vexRT[Ch4]-(vexRT[Ch1]/2); //Left 2 motors driving//
motor[DriveR]=+vexRT[Ch4]+(vexRT[Ch1]/2); //Right 2 motors driving//
motor[Strafe1]=-vexRT[Ch3]; //Left Strafe motor driving//
motor[Strafe2]=-vexRT[Ch3]; //Right Strafe motor driving//

  ////////////////////
 //Intake Direction//
////////////////////
//               //
//      _        //
//    /  |____   //
//   (    ____|  //
//    \ _|       //
//               //
//               //
//               //
///////////////////

}
else	if (SensorValue[gyro]>2250&SensorValue[gyro]<3600){ //More than 225 degrees but less than 360 degrees//
motor[DriveL]=+vexRT[Ch3]-(vexRT[Ch1]/2); //Left 2 motors driving//
motor[DriveR]=+vexRT[Ch3]+(vexRT[Ch1]/2); //Right 2 motors driving//
motor[Strafe1]=+vexRT[Ch4]; //Left Strafe motor driving//
motor[Strafe2]=+vexRT[Ch4]; //Right Strafe motor driving//

  ////////////////////
 //Intake Direction//
////////////////////
//       _       //
//      | |      //
//      | |      //
//     _| |_     //
//    \     /    //
//     \   /     //
//      \_/      //
//               //
///////////////////

}
else if (SensorValue[gyro]<-450&SensorValue[gyro]>-1350){ //Less than -45 degrees but more than -135 degrees//
motor[DriveL]=+vexRT[Ch3]-(vexRT[Ch1]/2); //Left 2 motors driving//
motor[DriveR]=+vexRT[Ch3]+(vexRT[Ch1]/2); //Right 2 motors driving//
motor[Strafe1]=+vexRT[Ch4]; //Left Strafe motor driving//
motor[Strafe2]=+vexRT[Ch4]; //Right Strafe motor driving//

  ////////////////////
 //Intake Direction//
////////////////////
//       _       //
//      | |      //
//      | |      //
//     _| |_     //
//    \     /    //
//     \   /     //
//      \_/      //
//               //
///////////////////

}
else if (SensorValue[gyro]<-1350&SensorValue[gyro]>-2250){ //Less than -135 degrees but more than -225 degrees//
motor[DriveL]=+vexRT[Ch4]-(vexRT[Ch1]/2); //Left 2 motors driving//
motor[DriveR]=+vexRT[Ch4]+(vexRT[Ch1]/2); //Right 2 motors driving//
motor[Strafe1]=-vexRT[Ch3]; //Left Strafe motor driving//
motor[Strafe2]=-vexRT[Ch3]; //Right Strafe motor driving//

  ////////////////////
 //Intake Direction//
////////////////////
//               //
//      _        //
//    /  |____   //
//   (    ____|  //
//    \ _|       //
//               //
//               //
//               //
///////////////////

}
else	if (SensorValue[gyro]<-2250&SensorValue[gyro]>-3600){ //Less than -225 degrees and more than -360 degrees//
motor[DriveL]=-vexRT[Ch3]-(vexRT[Ch1]/2); //Left 2 motors driving//
motor[DriveR]=-vexRT[Ch3]+(vexRT[Ch1]/2); //Right 2 motors driving//
motor[Strafe1]=-vexRT[Ch4]; //Left Strafe motor driving//
motor[Strafe2]=-vexRT[Ch4]; //Right Strafe motor driving//

  ////////////////////
 //Intake Direction//
////////////////////
//       _       //
//      / \      //
//     /   \     //
//    /_   _\    //
//      | |      //
//      | |      //
//      |_|      //
//               //
///////////////////

}

//* Resets the motors if above or below limits *//
else if (SensorValue[gyro]>3600){ //If Gyroscope is above limits//
SensorValue[gyro]=SensorValue[gyro]-3600; //Set the gyro back to 0 or closest to if it were to reset//
}
else if (SensorValue[gyro]<-3600){ //If Gyroscope is below limits//
SensorValue[gyro]=SensorValue[gyro]+3600; //Set the gyro back to 0 or closest to if it were to reset//
}
}
//* Left Side of the field program *//
else{ //If the robot is told that it's on the left side of the field//
	if (SensorValue[gyro]<450&SensorValue[gyro]>-450){ //Less than 45 degrees and more than -45 degrees//
motor[DriveL]=+vexRT[Ch4]-(vexRT[Ch1]/2); //Left 2 motors driving//
motor[DriveR]=+vexRT[Ch4]+(vexRT[Ch1]/2); //Right 2 motors driving//
motor[Strafe1]=-vexRT[Ch3]; //Left Strafe motor driving//
motor[Strafe2]=-vexRT[Ch3]; //Right Strafe motor driving//

  ////////////////////
 //Intake Direction//
////////////////////
//               //
//      _        //
//    /  |____   //
//   (    ____|  //
//    \ _|       //
//               //
//               //
//               //
///////////////////

}
else if (SensorValue[gyro]>450&SensorValue[gyro]<1350){ //More than 45 degrees and less than 135 degrees//
motor[DriveL]=+vexRT[Ch3]-(vexRT[Ch1]/2); //Left 2 motors driving//
motor[DriveR]=+vexRT[Ch3]+(vexRT[Ch1]/2); //Right 2 motors driving//
motor[Strafe1]=+vexRT[Ch4]; //Left Strafe motor driving//
motor[Strafe2]=+vexRT[Ch4]; //Right Strafe motor driving//

  ////////////////////
 //Intake Direction//
////////////////////
//       _       //
//      | |      //
//      | |      //
//     _| |_     //
//    \     /    //
//     \   /     //
//      \_/      //
//               //
///////////////////

}
else if (SensorValue[gyro]>1350&SensorValue[gyro]<2250){ //More than 135 degrees and less than 225 degrees//
motor[DriveL]=-vexRT[Ch4]-(vexRT[Ch1]/2); //Left 2 motors driving//
motor[DriveR]=-vexRT[Ch4]+(vexRT[Ch1]/2); //Right 2 motors driving//
motor[Strafe1]=+vexRT[Ch3]; //Left Strafe motor driving//
motor[Strafe2]=+vexRT[Ch3]; //Right Strafe motor driving//

  ////////////////////
 //Intake Direction//
////////////////////
//               //
//         _     //
//    ____|  \   //
//   |____    )  //
//        |_ /   //
//               //
//               //
//               //
///////////////////

}
else	if (SensorValue[gyro]>2250&SensorValue[gyro]<3600){ //More than 225 degrees and less than 360 degrees//
motor[DriveL]=-vexRT[Ch3]-(vexRT[Ch1]/2); //Left 2 motors driving//
motor[DriveR]=-vexRT[Ch3]+(vexRT[Ch1]/2); //Right 2 motors driving//
motor[Strafe1]=-vexRT[Ch4]; //Left Strafe motor driving//
motor[Strafe2]=-vexRT[Ch4]; //Right Strafe motor driving//

  ////////////////////
 //Intake Direction//
////////////////////
//       _       //
//      / \      //
//     /   \     //
//    /_   _\    //
//      | |      //
//      | |      //
//      |_|      //
//               //
///////////////////

}
else if (SensorValue[gyro]<-450&SensorValue[gyro]>-1350){ //Less than -45 degrees and more than -135 degrees//
motor[DriveL]=-vexRT[Ch3]-(vexRT[Ch1]/2); //Left 2 motors driving//
motor[DriveR]=-vexRT[Ch3]+(vexRT[Ch1]/2); //Right 2 motors driving//
motor[Strafe1]=-vexRT[Ch4]; //Left Strafe motor driving//
motor[Strafe2]=-vexRT[Ch4]; //Right Strafe motor driving//

  ////////////////////
 //Intake Direction//
////////////////////
//       _       //
//      / \      //
//     /   \     //
//    /_   _\    //
//      | |      //
//      | |      //
//      |_|      //
//               //
///////////////////

}
else if (SensorValue[gyro]<-1350&SensorValue[gyro]>-2250){ //Less than -135 degrees and more than -225 degrees//
motor[DriveL]=-vexRT[Ch4]-(vexRT[Ch1]/2); //Left 2 motors driving//
motor[DriveR]=-vexRT[Ch4]+(vexRT[Ch1]/2); //Right 2 motors driving//
motor[Strafe1]=+vexRT[Ch3]; //Left Strafe motor driving//
motor[Strafe2]=+vexRT[Ch3]; //Right Strafe motor driving//

  ////////////////////
 //Intake Direction//
////////////////////
//               //
//         _     //
//    ____|  \   //
//   |____    )  //
//        |_ /   //
//               //
//               //
//               //
///////////////////

}
else	if (SensorValue[gyro]<-2250&SensorValue[gyro]>-3600){ //Less than -225 degrees and more than -360 degrees//
motor[DriveL]=+vexRT[Ch3]-(vexRT[Ch1]/2); //Left 2 motors driving//
motor[DriveR]=+vexRT[Ch3]+(vexRT[Ch1]/2); //Right 2 motors driving//
motor[Strafe1]=+vexRT[Ch4]; //Left Strafe motor driving//c
motor[Strafe2]=+vexRT[Ch4]; //Right Strafe motor driving//

  ////////////////////
 //Intake Direction//
////////////////////
//       _       //
//      | |      //
//      | |      //
//     _| |_     //
//    \     /    //
//     \   /     //
//      \_/      //
//               //
///////////////////

}
//* Resets the motors if above or below limits *//
else if (SensorValue[gyro]>3600){ //If Gyroscope is above limits//
SensorValue[gyro]=SensorValue[gyro]-3600; //Set the gyro back to 0 or closest to if it were to reset//
}
else if (SensorValue[gyro]<-3600){ //If Gyroscope is below limits//
SensorValue[gyro]=SensorValue[gyro]+3600; //Set the gyro back to 0 or closest to if it were to reset//
}
}
}
//* Reseting The Gyroscope By a Button *//
if (vexRT[Btn7L]==1){ //If Button 1 is pressed...//
	SensorValue[gyro]=0; //Reset the gyroscope to 0//
}

//* Auto-Align to Fence By a Button *//
if(vexRT[Btn8R]==1){ //Just a little auto-alignment function when a button is held
	motor[DriveL]=motor[DriveL]-(SensorValue[gyro]/2);
	motor[DriveR]=motor[DriveR]+(SensorValue[gyro])/2;
}

/////////////////////////////////////////
//    Unfinished Smart-Shoot Program  //
///////////////////////////////////////

//* Catapult Program Unfinished *//
if(vexRT[Btn6U]==1){ //Raise Catapult//
	motor[Catapult1]=127;
	motor[Catapult2]=127;
	motor[Catapult3]=127;
	motor[Catapult4]=127;
	motor[Catapult5]=127;
	motor[Catapult6]=127;
}
else if(vexRT[Btn6D]==1){ //Lower Catapult//
	motor[Catapult1]=-127;
	motor[Catapult2]=-127;
	motor[Catapult3]=-127;
	motor[Catapult4]=-127;
	motor[Catapult5]=-127;
	motor[Catapult6]=-127;
}
else{ //Stall When no Button Is Pressed//
	motor[Catapult1]=0;
	motor[Catapult2]=0;
	motor[Catapult3]=0;
	motor[Catapult4]=0;
	motor[Catapult5]=0;
	motor[Catapult6]=0;
}
}
}
//////////////////////////////////
//        End of task          //
////////////////////////////////